!function(t){var e={};function o(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=t,o.c=e,o.d=function(t,e,s){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:s})},o.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";function s(t,e){return(e||document).querySelector(t)}function i(t,e,o){t.addEventListener(e,o)}function l(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}o.r(e);const n=new class{constructor(t,e){this.model=t,this.view=e,this.view.listenToggleAll(this.toggleAll.bind(this)),this.view.listenNewToDo(this.newToDo.bind(this)),this.view.listenToItemChange(this.endEditItem.bind(this)),this.view.listenToItemRemove(this.removeItem.bind(this)),this.view.listenToItemToggle(this.toggleItem.bind(this)),this.view.listenToRemoveCompleted(this.removeCompleted.bind(this))}setView(t=document.location.hash){const e=t.replace(/^#\//,"");let o;switch(e){case"active":o=this.model.getIncompleted();break;case"completed":o=this.model.getCompleted();break;default:o=this.model.todos}this.view.setToggleAllState(this.model.allComplete()),this.view.setChosenFilter(e),this.view.setMainVisibility(this.model.todos.length),this.view.setFooterVisibility(this.model.todos.length),this.view.setClearButtVisibility(this.model.getCompleted().length),this.view.renderList(o),this.view.updateActiveItemsField(this.model.getIncompleted().length)}newToDo(t){this.model.addItem(t),this.setView()}endEditItem(t,e){this.model.setItemTitle(t,e),this.setView()}toggleAll(t){this.model.setAllCompletion(t),this.setView()}toggleItem(t){this.model.toggleItem(t),this.setView()}removeItem(t){this.model.removeItem(t),this.setView()}removeCompleted(){this.model.removeCompleted(),this.setView()}}(new class{constructor(t){this.todos=[],this.pushToStorage=(()=>{localStorage.setItem(t,JSON.stringify(this.todos))}),this.pullFromStorage=(()=>{this.todos=JSON.parse(localStorage.getItem(t)||"[]")}),this.pullFromStorage()}getCompleted(){return this.todos.filter(t=>t.completed)}getIncompleted(){return this.todos.filter(t=>!t.completed)}setAllCompletion(t){this.todos.forEach(e=>{e.completed=!!t}),this.pushToStorage()}allComplete(){return this.getCompleted().length===this.todos.length}removeCompleted(){this.todos=this.getIncompleted(),this.pushToStorage()}addItem(t){if(t=t.trim()){const e={title:t,id:`${l()+l()}-${l()}-${l()}-${l()}-${l()}${l()}${l()}`,completed:!1};this.todos.push(e),this.pushToStorage()}}setItemTitle(t,e){t=t.trim();const o=this.todos.find(t=>Object.is(t.id,e));t?(o.title=t,this.pushToStorage()):this.removeItem(e)}removeItem(t){this.todos.forEach((e,o)=>{Object.is(e.id,t)&&this.todos.splice(o,1)}),this.pushToStorage()}toggleItem(t){this.todos.forEach(e=>{Object.is(e.id,t)&&(e.completed=!e.completed,this.pushToStorage())})}}("todo-astrielov"),new class{constructor(t){this.templates=t,this.sectionTodoapp=s(".todoapp"),this.sectionMain=s(".main",this.sectionTodoapp),this.inputNewTodo=s(".new-todo",this.sectionTodoapp),this.buttonToggleAll=s(".toggle-all",this.sectionTodoapp),this.buttonClearCompleted=s(".clear-completed",this.sectionTodoapp),this.ulTodoList=s(".todo-list",this.sectionTodoapp),this.counter=s(".todo-count",this.sectionTodoapp),this.footer=s(".footer",this.sectionTodoapp),this.filters=s(".filters",this.sectionTodoapp)}setMainVisibility(t){this.sectionMain.style.display=t?"block":"none"}setFooterVisibility(t){this.footer.style.display=t?"block":"none"}setClearButtVisibility(t){this.buttonClearCompleted.style.display=t?"block":"none"}setToggleAllState(t){this.buttonToggleAll.checked=t}setChosenFilter(t){let e;switch(this.filters.querySelectorAll("a").forEach(t=>t.classList.remove("selected")),t){case"active":e=s("#showActive",this.filters);break;case"completed":e=s("#showCompleted",this.filters);break;default:e=s("#showAll",this.filters)}e.classList.add("selected")}setListContent(t){let e=this.ulTodoList.firstChild;for(;e;)this.ulTodoList.removeChild(e),e=this.ulTodoList.firstChild;this.ulTodoList.appendChild(t)}listenToggleAll(t){i(this.buttonToggleAll,"click",()=>{const e=this.buttonToggleAll.checked;t(e)})}listenNewToDo(t){i(this.inputNewTodo,"change",()=>{t(this.inputNewTodo.value),this.inputNewTodo.value=""})}listenToItemChange(t){i(this.ulTodoList,"dblclick",({target:e})=>{if(!Object.is(e.tagName,"LABEL"))return;const o=e.parentElement.parentElement,s=document.createElement("input");s.classList.add("edit"),s.value=e.innerText,o.appendChild(s),o.classList.add("editing"),s.focus(),i(s,"blur",()=>{s.dataset.cancelled||t(s.value,o.dataset.id),o.classList.remove("editing"),o.removeChild(s)}),i(s,"keydown",t=>{"Escape"===t.key&&(s.dataset.cancelled="true",s.blur()),"Enter"===t.key&&s.blur()})})}listenToItemRemove(t){i(this.ulTodoList,"click",({target:e})=>{if(!e.classList.contains("destroy"))return;const o=e.parentElement.parentElement;t(o.dataset.id)})}listenToRemoveCompleted(t){i(this.buttonClearCompleted,"click",()=>{t()})}listenToItemToggle(t){i(this.ulTodoList,"click",({target:e})=>{if(!e.classList.contains("toggle"))return;const o=e.parentElement.parentElement;o.classList.contains("completed")?o.classList.remove("completed"):o.classList.add("completed"),t(o.dataset.id)})}renderList(t){const e=document.createDocumentFragment();t.forEach(t=>{const o=this.templates.constructor.newItemLi(t);e.appendChild(o)}),this.setListContent(e)}updateActiveItemsField(t){const e=this.templates.constructor.newTodoCountSpan(t);this.counter.parentElement.replaceChild(e,this.counter),this.counter=e}}(new class{static newItemLi(t){const e=document.createElement("li");return e.dataset.id=t.id,e.innerHTML=`<div class="view">\n                      <input class="toggle" type="checkbox">\n                      <label>${t.title}</label>\n                      <button class="destroy"></button>\n                    </div>`,t.completed&&(e.classList.add("completed"),s(".toggle",e).checked=!0),e}static newTodoCountSpan(t){const e=document.createElement("span"),o=t%10==1?"":"s";return e.classList.add("todo-count"),e.innerHTML=`<strong>${t}</strong> item${o} left`,e}}));i(window,"load",()=>n.setView()),i(window,"hashchange",()=>n.setView())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,