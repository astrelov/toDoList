!function(t){var e={};function o(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=t,o.c=e,o.d=function(t,e,s){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:s})},o.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";function s(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}o.r(e);class i{constructor(t){this.uid=`${s()+s()}-${s()}-${s()}-${s()}-${s()}${s()}${s()}`,this.title=t,this.completed=!1}setTitle(t){this.title=t}switchState(){this.completed=!this.completed}setCompleted(){this.completed=!0}setIncompleted(){this.completed=!1}isCompleted(){return this.completed}}new class{constructor(t,e){this.model=t,this.view=e}}(new class{constructor(t){this.todos=[],this.activeItems=0,this.pushToStorage=(()=>{localStorage.setItem(t,JSON.stringify(this.todos))}),this.pullFromStorage=(()=>{this.todos=JSON.parse(localStorage.getItem(t)||"[]"),this.updateActiveItems()}),this.pullFromStorage()}getCompleted(){return this.todos.filter(t=>t.isCompleted())}getIncompleted(){return this.todos.filter(t=>!t.isCompleted())}setAllComplete(){this.todos.forEach(t=>t.setCompleted()),this.updateActiveItems()}setAllIncomplete(){this.todos.forEach(t=>t.setIncompleted()),this.updateActiveItems()}allComplete(){return this.getCompleted().length===this.todos.length}allIncomplete(){return this.getIncompleted().length===this.todos.length}removeCompleted(){this.todos=this.getIncompleted(),this.pushToStorage()}addItem(t){(t=t.trim())&&(this.todos.push(new i(t)),this.pushToStorage(),this.updateActiveItems())}setItemTitle(t,e){t=t.trim();const o=this.todos.find(t=>!t.id.localeCompare(e));t?(o.setTitle(t),this.pushToStorage()):this.removeItem(e)}removeItem(t){this.todos.forEach((e,o)=>{0===e.id.localeCompare(t)&&this.todos.splice(o,1)}),this.pushToStorage(),this.updateActiveItems()}updateActiveItems(){this.activeItems=this.getIncompleted().length}}("todo-astrielov"),new class{constructor(){}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,