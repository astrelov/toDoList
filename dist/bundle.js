!function(t){var e={};function o(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=t,o.c=e,o.d=function(t,e,s){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:s})},o.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";function s(t,e){return(e||document).querySelector(t)}function i(t,e,o){t.addEventListener(e,o)}function n(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}o.r(e);const l=new class{constructor(t,e){this.model=t,this.view=e,this.view.listenToggleAll(this.toggleAll.bind(this)),this.view.listenNewToDo(this.newToDo.bind(this)),this.view.listenToItemChange(this.endEditItem.bind(this)),this.view.listenToItemRemove(this.removeItem.bind(this)),this.view.listenToItemToggle(this.toggleItem.bind(this)),this.view.listenToRemoveCompleted(this.removeCompleted.bind(this))}setView(t=document.location.hash){let e;switch(t.replace(/^#\//,"")){case"active":e=this.model.getIncompleted();break;case"completed":e=this.model.getCompleted();break;case"":e=this.model.todos}console.log(this.model.todos),this.view.setMainVisibility(this.model.todos.length),this.view.setFooterVisibility(this.model.todos.length),this.view.renderList(e),this.view.updateActiveItems(this.model.getIncompleted().length)}newToDo(t){this.model.addItem(t),this.setView()}endEditItem(t,e){this.model.setItemTitle(t,e),this.setView()}toggleAll(t){this.model.setAllCompletion(t),this.setView()}toggleItem(t){this.model.toggleItem(t),this.setView()}removeItem(t){this.model.removeItem(t),this.setView()}removeCompleted(){this.model.removeCompleted(),this.setView()}}(new class{constructor(t){this.todos=[],this.pushToStorage=(()=>{localStorage.setItem(t,JSON.stringify(this.todos))}),this.pullFromStorage=(()=>{this.todos=JSON.parse(localStorage.getItem(t)||"[]")}),this.pullFromStorage()}getCompleted(){return this.todos.filter(t=>t.completed)}getIncompleted(){return this.todos.filter(t=>!t.completed)}setAllCompletion(t){this.todos.forEach(e=>e.completed=t),this.pushToStorage()}allComplete(){return this.getCompleted().length===this.todos.length}allIncomplete(){return this.getIncompleted().length===this.todos.length}removeCompleted(){this.todos=this.getIncompleted(),this.pushToStorage()}addItem(t){if(t=t.trim()){const e={title:t,id:`${n()+n()}-${n()}-${n()}-${n()}-${n()}${n()}${n()}`,completed:!1};this.todos.push(e),this.pushToStorage()}}setItemTitle(t,e){t=t.trim();const o=this.todos.find(t=>Object.is(t.id,e));t?(o.title=t,this.pushToStorage()):this.removeItem(e)}removeItem(t){this.todos.forEach((e,o)=>{Object.is(e.id,t)&&this.todos.splice(o,1)}),this.pushToStorage()}toggleItem(t){this.todos.forEach(e=>{Object.is(e.id,t)&&(e.completed=!e.completed,this.pushToStorage())})}}("todo-astrielov"),new class{constructor(t){this.templates=t,this.sectionTodoapp=s(".todoapp"),this.sectionMain=s(".main",this.sectionTodoapp),this.inputNewTodo=s(".new-todo",this.sectionTodoapp),this.buttonToggleAll=s(".toggle-all",this.sectionTodoapp),this.buttonClearCompleted=s(".clear-completed",this.sectionTodoapp),this.ulTodoList=s(".todo-list",this.sectionTodoapp),this.counter=s(".todo-count",this.sectionTodoapp),this.footer=s(".footer",this.sectionTodoapp)}setMainVisibility(t){this.sectionMain.style.display=t?"block":"none"}setFooterVisibility(t){this.footer.style.display=t?"block":"none"}swapListContent(t){this.ulTodoList.innerHTML="",this.ulTodoList.appendChild(t)}clearNewToDoInput(){this.inputNewTodo.value=""}listenToggleAll(t){i(this.buttonToggleAll,"click",()=>{const e=this.buttonToggleAll.checked;t(e)})}listenNewToDo(t){i(this.inputNewTodo,"change",()=>{const e=this.inputNewTodo.value.trim();e&&(this.clearNewToDoInput(),t(e))})}listenToItemChange(t){i(this.ulTodoList,"dblclick",({target:e})=>{if(!Object.is(e.tagName,"LABEL"))return;const o=e.parentElement.parentElement,n=s(".edit",o)||document.createElement("input");n.classList.add("edit"),n.value=e.innerText,o.appendChild(n),o.classList.add("editing"),n.focus(),i(n,"change",()=>{t(n.value,o.dataset.id),o.classList.remove("editing")}),i(n,"blur",()=>{t(n.value,o.dataset.id),o.classList.remove("editing")})})}listenToItemRemove(t){i(this.ulTodoList,"click",({target:e})=>{if(!e.classList.contains("destroy"))return;const o=e.parentElement.parentElement;t&&t(o.dataset.id)})}listenToRemoveCompleted(t){i(this.buttonClearCompleted,"click",()=>{t()})}listenToItemToggle(t){i(this.ulTodoList,"click",({target:e})=>{if(!e.classList.contains("toggle"))return;const o=e.parentElement.parentElement;o.classList.contains("completed")?o.classList.remove("completed"):o.classList.add("completed"),t&&t(o.dataset.id)})}renderList(t){const e=document.createDocumentFragment();t.forEach(t=>{const o=document.createElement("li");o.innerHTML=this.templates.constructor.item(t.title),o.dataset.id=t.id,t.completed&&(o.classList.add("completed"),s(".toggle",o).checked=!0),e.appendChild(o)},""),this.swapListContent(e)}updateActiveItems(t){const e=this.templates.constructor.todoCount(t);this.counter.innerHTML=e}}(new class{static item(t,e){return`\n    <div class="view">\n      <input class="toggle" type="checkbox">\n      <label>${t}</label>\n      <button class="destroy"></button>\n    </div>\n    \x3c!--<input class="edit" value="${t}">--\x3e`}static todoCount(t){return`<strong>${t}</strong> item${1===t?"":"s"} left`}}));i(window,"load",()=>l.setView()),i(window,"hashchange",()=>l.setView()),i(window,"load",()=>{console.log(`DOCUMENT LOCATION HASH: ${document.location.hash}`)}),i(window,"hashchange",()=>{console.log(`DOCUMENT LOCATION HASH: ${document.location.hash}`)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,