!function(t){var o={};function e(n){if(o[n])return o[n].exports;var l=o[n]={i:n,l:!1,exports:{}};return t[n].call(l.exports,l,l.exports,e),l.l=!0,l.exports}e.m=t,e.c=o,e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e.p="",e(e.s=0)}([function(t,o,e){"use strict";function n(t,o,e){t.addEventListener(o,e)}function l(t){return document.querySelector(t)}e.r(o);const r={sectionTodoapp:l(".todoapp"),sectionMain:l(".main"),inputNewTodo:l(".new-todo"),buttonToggleAll:l(".toggle-all"),buttonClearCompleted:l(".clear-completed"),linkAll:l("#showAll"),linkActive:l("#showActive"),linkCompleted:l("#showCompleted"),ulTodoList:l(".todo-list"),counter:l(".todo-count"),footer:l(".footer")};function s(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}class i{constructor(t){this.uid=`${s()+s()}-${s()}-${s()}-${s()}-${s()}${s()}${s()}`,this.title=t.trim(),this.completed=!1}setTitle(t){this.title=t.trim()}}const u=r,c=new class{constructor(){const t=JSON.parse(localStorage.getItem("todos-purejs"))||[];this.todos=t.map(t=>{const o=new i(t.title);return o.completed=t.completed,o.uid=t.uid,o})}getCompleted(){return this.todos.filter(t=>!0===t.completed)}getIncompleted(){return this.todos.filter(t=>!1===t.completed)}allComplete(){return this.getCompleted().length===this.todos.length}allIncomplete(){return this.getIncompleted().length===this.todos.length}pushToStorage(){localStorage.setItem("todos-purejs",JSON.stringify(this.todos))}removeCompleted(){this.todos=this.getIncompleted(),this.pushToStorage()}add(t){this.todos.push(new i(t)),this.pushToStorage()}};n(u.inputNewTodo,"click",c.add(u.inputNewTodo.value)),n(u.inputNewTodo,"keydown",function(t){console.log("keydown"),console.log(t)}),n(u.inputNewTodo,"keypress",function(t){console.log("keypress"),console.log(t)}),n(u.inputNewTodo,"keyup",function(t){console.log("keyup"),console.log(t)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvZXZlbnRIYW5kbGVycy9saXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdXRpbGl0aWVzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvdXRpbGl0aWVzL2FwcEh0bWxOb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9qcy91dGlsaXRpZXMvaWRHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vanMvc3RvcmUvdG9kb01vZGVsLmpzIiwid2VicGFjazovLy8uL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9zdG9yZS9zdG9yZU1vZGVsLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJzZXRMaXN0ZW5lciIsInRhcmdldCIsImV2ZW50VHlwZSIsImNhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsIiQiLCJ4IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidG9kb0h0bWxOb2RlcyIsInNlY3Rpb25Ub2RvYXBwIiwic2VjdGlvbk1haW4iLCJpbnB1dE5ld1RvZG8iLCJidXR0b25Ub2dnbGVBbGwiLCJidXR0b25DbGVhckNvbXBsZXRlZCIsImxpbmtBbGwiLCJsaW5rQWN0aXZlIiwibGlua0NvbXBsZXRlZCIsInVsVG9kb0xpc3QiLCJjb3VudGVyIiwiZm9vdGVyIiwiczQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInRvZG9Nb2RlbF9Ub0RvTW9kZWwiLCJbb2JqZWN0IE9iamVjdF0iLCJ0aXRsZSIsInRoaXMiLCJ1aWQiLCJ0cmltIiwiY29tcGxldGVkIiwiaHRtbEFwcE5vZGVzIiwidG9kb1N0YXRlIiwicHVsbGVkVG9kb3MiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwidG9kb3MiLCJtYXAiLCJ0b2RvIiwicmVzVG9kbyIsImZpbHRlciIsImdldENvbXBsZXRlZCIsImxlbmd0aCIsImdldEluY29tcGxldGVkIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsInB1c2hUb1N0b3JhZ2UiLCJwdXNoIiwiYWRkIiwiZSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsa0NDbEVBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FGLEVBQUFHLGlCQUFBRixFQUFBQyxHQ0ZBLFNBQUFFLEVBQUFDLEdBQ0EsT0FBQUMsU0FBQUMsY0FBQUYsVUNDQSxNQUFBRyxHQUNBQyxlQUFBTCxFQUFBLFlBQ0FNLFlBQUFOLEVBQUEsU0FDQU8sYUFBQVAsRUFBQSxhQUNBUSxnQkFBQVIsRUFBQSxlQUNBUyxxQkFBQVQsRUFBQSxvQkFDQVUsUUFBQVYsRUFBQSxZQUNBVyxXQUFBWCxFQUFBLGVBQ0FZLGNBQUFaLEVBQUEsa0JBQ0FhLFdBQUFiLEVBQUEsY0FDQWMsUUFBQWQsRUFBQSxlQUNBZSxPQUFBZixFQUFBLFlDYkEsU0FBQWdCLElBQ0EsT0FBQUMsS0FBQUMsTUFBQSxTQUFBRCxLQUFBRSxXQUNBQyxTQUFBLElBQ0FDLFVBQUEsU0NEQUMsRUFDQUMsWUFBQUMsR0FDQUMsS0FBQUMsT0RHWVYsV0FBZUEsT0FBUUEsT0FBUUEsT0FBUUEsTUFBT0EsTUFBT0EsTUNGakVTLEtBQUFELFFBQUFHLE9BQ0FGLEtBQUFHLFdBQUEsRUFHQUwsU0FBQUMsR0FDQUMsS0FBQUQsUUFBQUcsUUNOQSxNQUFBRSxFSGFBekIsRUdaQTBCLEVBQUEsVUNGQVAsY0FDQSxNQUFBUSxFQUFBQyxLQUFBQyxNQUFBQyxhQUFBQyxRQUFBLHFCQUVBVixLQUFBVyxNQUFBTCxFQUFBTSxJQUFBQyxJQUNBLE1BQUFDLEVBQUEsSUFBQWpCLEVBQUFnQixFQUFBZCxPQUdBLE9BRkFlLEVBQUFYLFVBQUFVLEVBQUFWLFVBQ0FXLEVBQUFiLElBQUFZLEVBQUFaLElBQ0FhLElBSUFoQixlQUNBLE9BQUFFLEtBQUFXLE1BQUFJLE9BQUFGLElBQUEsSUFBQUEsRUFBQVYsV0FHQUwsaUJBQ0EsT0FBQUUsS0FBQVcsTUFBQUksT0FBQUYsSUFBQSxJQUFBQSxFQUFBVixXQUdBTCxjQUNBLE9BQUFFLEtBQUFnQixlQUFBQyxTQUFBakIsS0FBQVcsTUFBQU0sT0FHQW5CLGdCQUNBLE9BQUFFLEtBQUFrQixpQkFBQUQsU0FBQWpCLEtBQUFXLE1BQUFNLE9BR0FuQixnQkFDQVcsYUFBQVUsUUFBQSxlQUFBWixLQUFBYSxVQUFBcEIsS0FBQVcsUUFHQWIsa0JBQ0FFLEtBQUFXLE1BQUFYLEtBQUFrQixpQkFDQWxCLEtBQUFxQixnQkFHQXZCLElBQUFDLEdBQ0FDLEtBQUFXLE1BQUFXLEtBQUEsSUFBQXpCLEVBQUFFLElBQ0FDLEtBQUFxQixrQkRsQ0FuRCxFQUFBa0MsRUFBQXRCLGFBQUEsUUFBQXVCLEVBQUFrQixJQUFBbkIsRUFBQXRCLGFBQUFyQixRQWVBUyxFQUFBa0MsRUFBQXRCLGFBQUEsVUFaQSxTQUFBMEMsR0FDQUMsUUFBQUMsSUFBQSxXQUNBRCxRQUFBQyxJQUFBRixLQVdBdEQsRUFBQWtDLEVBQUF0QixhQUFBLFdBVEEsU0FBQTBDLEdBQ0FDLFFBQUFDLElBQUEsWUFDQUQsUUFBQUMsSUFBQUYsS0FRQXRELEVBQUFrQyxFQUFBdEIsYUFBQSxRQU5BLFNBQUEwQyxHQUNBQyxRQUFBQyxJQUFBLFNBQ0FELFFBQUFDLElBQUFGIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldExpc3RlbmVyKHRhcmdldCwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICQoeCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih4KTtcbn1cbiIsImltcG9ydCBxcyBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCB0b2RvSHRtbE5vZGVzID0ge1xuICBzZWN0aW9uVG9kb2FwcDogcXMoJy50b2RvYXBwJyksXG4gIHNlY3Rpb25NYWluOiBxcygnLm1haW4nKSxcbiAgaW5wdXROZXdUb2RvOiBxcygnLm5ldy10b2RvJyksXG4gIGJ1dHRvblRvZ2dsZUFsbDogcXMoJy50b2dnbGUtYWxsJyksXG4gIGJ1dHRvbkNsZWFyQ29tcGxldGVkOiBxcygnLmNsZWFyLWNvbXBsZXRlZCcpLFxuICBsaW5rQWxsOiBxcygnI3Nob3dBbGwnKSxcbiAgbGlua0FjdGl2ZTogcXMoJyNzaG93QWN0aXZlJyksXG4gIGxpbmtDb21wbGV0ZWQ6IHFzKCcjc2hvd0NvbXBsZXRlZCcpLFxuICB1bFRvZG9MaXN0OiBxcygnLnRvZG8tbGlzdCcpLFxuICBjb3VudGVyOiBxcygnLnRvZG8tY291bnQnKSxcbiAgZm9vdGVyOiBxcygnLmZvb3RlcicpLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SHRtbEFwcE5vZGVzKCkge1xuICByZXR1cm4gdG9kb0h0bWxOb2Rlcztcbn1cbiIsImZ1bmN0aW9uIHM0KCkge1xuICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAudG9TdHJpbmcoMTYpXG4gICAgLnN1YnN0cmluZygxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJVbmlxSWQoKSB7XG4gIHJldHVybiBgJHtzNCgpICsgczQoKX0tJHtzNCgpfS0ke3M0KCl9LSR7czQoKX0tJHtzNCgpfSR7czQoKX0ke3M0KCl9YDtcbn1cbiIsImltcG9ydCBnZW5lclVuaXFJZCBmcm9tICcuLi91dGlsaXRpZXMvaWRHZW5lcmF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb0RvTW9kZWwge1xuICBjb25zdHJ1Y3Rvcih0aXRsZSkge1xuICAgIHRoaXMudWlkID0gZ2VuZXJVbmlxSWQoKTtcbiAgICB0aGlzLnRpdGxlID0gdGl0bGUudHJpbSgpO1xuICAgIHRoaXMuY29tcGxldGVkID0gZmFsc2U7XG4gIH1cblxuICBzZXRUaXRsZSh0aXRsZSkge1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZS50cmltKCk7XG4gIH1cbn1cbiIsImltcG9ydCBzZXRMaXN0ZW5lciBmcm9tICcuL2V2ZW50SGFuZGxlcnMvbGlzdGVuZXJzJztcbmltcG9ydCBnZXRIdG1sQXBwTm9kZXMgZnJvbSAnLi91dGlsaXRpZXMvYXBwSHRtbE5vZGVzJztcbmltcG9ydCBUb0RvU3RvcmVTZXJ2aWNlIGZyb20gJy4vc3RvcmUvc3RvcmVNb2RlbCc7XG5cbmNvbnN0IGh0bWxBcHBOb2RlcyA9IGdldEh0bWxBcHBOb2RlcygpO1xuY29uc3QgdG9kb1N0YXRlID0gbmV3IFRvRG9TdG9yZVNlcnZpY2UoKTtcblxuc2V0TGlzdGVuZXIoaHRtbEFwcE5vZGVzLmlucHV0TmV3VG9kbywgJ2NsaWNrJywgdG9kb1N0YXRlLmFkZChodG1sQXBwTm9kZXMuaW5wdXROZXdUb2RvLnZhbHVlKSk7XG5cblxuZnVuY3Rpb24ga2V5ZG93bihlKSB7XG4gIGNvbnNvbGUubG9nKCdrZXlkb3duJyk7XG4gIGNvbnNvbGUubG9nKGUpO1xufVxuZnVuY3Rpb24ga2V5cHJlc3MoZSkge1xuICBjb25zb2xlLmxvZygna2V5cHJlc3MnKTtcbiAgY29uc29sZS5sb2coZSk7XG59XG5mdW5jdGlvbiBrZXl1cChlKSB7XG4gIGNvbnNvbGUubG9nKCdrZXl1cCcpO1xuICBjb25zb2xlLmxvZyhlKTtcbn1cbnNldExpc3RlbmVyKGh0bWxBcHBOb2Rlcy5pbnB1dE5ld1RvZG8sICdrZXlkb3duJywga2V5ZG93bik7XG5zZXRMaXN0ZW5lcihodG1sQXBwTm9kZXMuaW5wdXROZXdUb2RvLCAna2V5cHJlc3MnLCBrZXlwcmVzcyk7XG5zZXRMaXN0ZW5lcihodG1sQXBwTm9kZXMuaW5wdXROZXdUb2RvLCAna2V5dXAnLCBrZXl1cCk7XG4iLCJpbXBvcnQgVG9Eb01vZGVsIGZyb20gJy4vdG9kb01vZGVsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9Eb1N0b3JlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHB1bGxlZFRvZG9zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb3MtcHVyZWpzJykpIHx8IFtdO1xuXG4gICAgdGhpcy50b2RvcyA9IHB1bGxlZFRvZG9zLm1hcCgodG9kbykgPT4ge1xuICAgICAgY29uc3QgcmVzVG9kbyA9IG5ldyBUb0RvTW9kZWwodG9kby50aXRsZSk7XG4gICAgICByZXNUb2RvLmNvbXBsZXRlZCA9IHRvZG8uY29tcGxldGVkO1xuICAgICAgcmVzVG9kby51aWQgPSB0b2RvLnVpZDtcbiAgICAgIHJldHVybiByZXNUb2RvO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29tcGxldGVkKCkge1xuICAgIHJldHVybiB0aGlzLnRvZG9zLmZpbHRlcih0b2RvID0+IHRvZG8uY29tcGxldGVkID09PSB0cnVlKTtcbiAgfVxuXG4gIGdldEluY29tcGxldGVkKCkge1xuICAgIHJldHVybiB0aGlzLnRvZG9zLmZpbHRlcih0b2RvID0+IHRvZG8uY29tcGxldGVkID09PSBmYWxzZSk7XG4gIH1cblxuICBhbGxDb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb21wbGV0ZWQoKS5sZW5ndGggPT09IHRoaXMudG9kb3MubGVuZ3RoO1xuICB9XG5cbiAgYWxsSW5jb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbmNvbXBsZXRlZCgpLmxlbmd0aCA9PT0gdGhpcy50b2Rvcy5sZW5ndGg7XG4gIH1cblxuICBwdXNoVG9TdG9yYWdlKCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2Rvcy1wdXJlanMnLCBKU09OLnN0cmluZ2lmeSh0aGlzLnRvZG9zKSk7XG4gIH1cblxuICByZW1vdmVDb21wbGV0ZWQoKSB7XG4gICAgdGhpcy50b2RvcyA9IHRoaXMuZ2V0SW5jb21wbGV0ZWQoKTtcbiAgICB0aGlzLnB1c2hUb1N0b3JhZ2UoKTtcbiAgfVxuXG4gIGFkZCh0aXRsZSkge1xuICAgIHRoaXMudG9kb3MucHVzaChuZXcgVG9Eb01vZGVsKHRpdGxlKSk7XG4gICAgdGhpcy5wdXNoVG9TdG9yYWdlKCk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=